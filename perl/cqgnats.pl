#!/tools/perl/5.8.0/SunOS/bin/perl
########################### BEGIN EMBEDDED DOCUMENTATION

=head1 NAME - cqgnats

B<cqgnats - Check a gnats database for field erros (see options) and/or fix the errors.

=head1 SYNOPSIS

B<cqgnats>

=over 4

=item [-h/help | -u/usage] [-w/verbose ] [-l/log <log file name>]

=item    [-d / debug  <debug level>]

=item    [-a / action  <gnats action after processing message>]

=item    [-msg / message  <Mail file containing CQ report>]

=item    [-db / database  [db-]<gnats database dir name>] 

=item    [-dbn / dbname  <database name>] 

=item    [-gp / gnatspdir  <gnats db root parent dir>]

=item    [-gh / gnatshost  <gnats host machine name>]

=item    [-gu / gnatsuser  <gnats user>]

=item    [-gp / gnatspasswd  <gnats password>]

=back

=head1 DESCRIPTION

I<This file is generated with the pod2html script amd its contents are included with cqgnats>

B<turn CQ report into a Gnats PR>

This script reads a mail message generated by CQ and creates from its info a new Gnats PR.

=head1 OPTIONS

=head2 General Options

=over 4

=item B<-usage / -u>: this message.

=item B<-help / -h>: Short usage statement

=item B<-verbose / -w>: Extra output including echo of parameters

=item -<no abbrev>B< / log>: 

log file name (in tmp unless a full path given )
    Whether log supplied or default used, status messages are sent to stdout

    DEFAULT: /tmp/project_field_status_report

=item    B<-action / -a>  [<gnats action after processing message>]       
e.g. 'submit'

    DEFAULT: submit

=item    B<-message / -msg>  [<Mail file containing CQ report>]       

location of mail file containing CQ report

    DEFAULT: $HOME/cqreport

=back

=head2 Database optiions

=over 4

=item    B<-database / -db>  [[db-]<gnats data base directory>]       

Gnats database directory name: can be just the moniker (e.g.test-it) or the full name: db-test-it

    DEFAULT: db-test-it

=item    B<-dbname / -dbn>  [<Whole database name>]

Gnats database name: as found in the databases file associated with the db-<> directory name

    DEFAULT: IT-Test

=item    B<-gnatspdir / -gp>  [<gnats pdir name>]       

Gnats db root parent dir

    DEFAULT: /tools/gnats/4.0/share/gnats

=item    B<-gnatshost / -gh>  [<gnats host name>]       

Gnats host server

    DEFAULT: gnats-irva-3

=item    B<-gnatsuser / -gu>  [<gnats user name>]       

Gnats user name

    DEFAULT: NONE (REQUIRED)

=item    B<-gnatspasswd / -gup>  [<gnats user password>]       

Gnats user password

    DEFAULT: NONE (REQUIRED)

=back

=head1 EXAMPLES

=over 4

=item B<cqgnats -h>

Prints a summarized version of this usage message

=item B<cqgnats -u>

Prints this usage message

To run as with the current defaults:

=item B<cqgnats -a submit -db test-it -nf Release-Found-In -of Release -dbn Residential_Database -msg $HOME/cqgnats>IP:>

To run with defaults but do not actually submit, only print out results

=item B<cqgnats -d 1>

=back

=cut

##########################################################################
########################### CqGnatsOptions ###########################
package CqGnatsOptions;

@CqGnatsOptions::ISA = qw(Exporter);

# This is the program parameters package

use Pod::Usage;
use Getopt::Long;
use Exporter;
use Carp;

#use strict;

$Getopt::Long::autoabbrev = 1;
$Getopt::Long::debug = 0;


sub new {
    my ($type ) = @_;

    my $self = {};

    bless $self, $type;

    my $initok = $self->Init();

    return( $self, $initok );
}

############################### Init ############################
sub Init {
    my ($self ) = @_;

    my %options = ();

    my $initok = GetOptions( 
       "help|?"             => \$options{'help'},
       "usage|u"            => \$options{'usage'},
       "verbose|w"          => \$options{'verbose'},
       "log|l=s"              => \$options{'log'},
       "debug|d=s"              => \$options{'debug'},

       'action|a=s'   => \$options{'action'},
       'dbdir|db=s'   => \$options{'dbdir'},
       'dbname|dbn=s'   => \$options{'dbname'},
       'gnatspdir|gp=s'   => \$options{'gnatspdir'},
       'gnatshost|gh=s'   => \$options{'gnatshost'},
       'gnatsuser|gu=s'   => \$options{'gnatsuser'},
       'gnatspasswd|gup=s'   => \$options{'gnatspasswd'},
       'message|msg=s'   => \$options{'message'}
   )
        || pod2usage( -msg => "Syntax error.", -exitval => 1, -verbose => 0 );

    pod2usage( -exitval => 0, -verbose => 0 ) if $options{'help'};
    pod2usage( -exitval => 0, -verbose => 1 ) if $options{'usage'};

    my $verbose = $options{'verbose'};
    my $log = $options{'log'};
    my $pcmlog;
   #( my $pcmlog, $initok ) = CMTaskLog->new( $verbose, $log,"","", $productName, $rev );

    $options{'pcmlog'} = $pcmlog;

    %{$self->{'options'}} = %options;

    return $initok;
}

################################ POptions ############################
sub POptions {
    my ($self) = @_;

    # Return pointer to the options hash

    return( $self->{'options'} );
}

###############################################################
sub Get {
    my ($self, $option ) = @_;

    my %options = %{$self->{'options'}};
    my $value = $options{$option};

    return( $value );
}


=over 4

=item ==============================================================================================

=back

=cut

package main;

#################################################################################
sub Update_PR_File {
	my( $prfile, @lines ) = @_;

	# Update_PR_File( $prfile, @lines );

	# Write lines of PR file
	open FH, ">$prfile";
	my $linelist = join( "\n", @lines );
	print FH "$linelist\n";
	close FH;
}

#################################################################################
sub Unlock_DB {

	unless( $main::local ){
		my $ghost = $main::gnatshost;
		my $dbase = $main::DATABASE;
		my $cmd = qq( /tools/gnats/4.0/SunOS/libexec/gnats/pr-edit --host=$ghost --port=1530 --database=$dbase -v gnats4 -w emsggn09 --unlockdb );
		qx( $cmd );

		my $lockfailed = $?;
		if( $lockfailed ){
			die( "Error: Could not unlock database \"$dbase\".\n" );
		}
	}
}
#################################################################################
sub Lock_DB {

    my $ghost = $main::gnatshost;
    my $dbase = $main::DATABASE;
	if( $main::local ){
		print( "Warning: In test mode; Not locking database: $main::DATABASE!\n" );
	} else {
		$cmd = qq( /tools/gnats/4.0/SunOS/libexec/gnats/pr-edit --host=$ghost --port=1530 --database=$dbase -v gnats4 -w emsggn09 --lockdb );
		qx( $cmd );

		my $lockfailed = $?;
		if( $lockfailed ){
			die( "Error: Could not lock database \"$dbase\".\n" );
		}
	}
}

#################################################################################
sub Create_PR {
my( %Gnats ) = @_;

	my $newPR = Net::Gnats::PR->new();
	#my %fieldvalues = $newPR->asHash();
  $newPR->setField("Submitter-Id", $Gnats{'Submitter-Id'});
  $newPR->setField("Originator", $Gnats{'Originator'});
  $newPR->setField("Synopsis", $Gnats{'Synopsis'});
  #$newPR->setField("Confidential","no");
  $newPR->setField("Severity", $Gnats{'Severity'});
  $newPR->setField("Priority", $Gnats{'Priority'});
  $newPR->setField("Category", $Gnats{'Category'});
  $newPR->setField("Description", $Gnats{'Description'});
  $newPR->setField("Arrival-Date", $Gnats{'Arrival-Date'});
  $newPR->setField("Reference_Number", $Gnats{'Reference_Number'});
  $newPR->setField("Responsible", $Gnats{'Responsible'});
  #$newPR->setField("Reporter\'s email", $Gnats{'Reporter\'s email'});

	return( $newPR );
}

#################################################################################
sub Print_PR {
	my( $newPR ) = @_;

	my @fields = $newPR->getKeys();
	foreach $field ( @fields ){
		$value = $newPR->getField( $field );
		print( "$field:\n" );
		print( "\t$value\n" );
	}
}

#################################################################################
sub Submit_PR {
	my( %Gnats ) = @_;

#	Now format and submit the Gnats PR

#	$Gnats{'Submitter-Id'} = $Submitter_Id;
#	$Gnats{'Originator'} = $Originator;
#	$Gnats{'Synopsis'} = \@Synopsis;
#	$Gnats{'Severity'} = $gnats_severity_value;
#	$Gnats{'Priority'} = $Priority;
#	$Gnats{'Category'} = $Category;
#	$Gnats{'Description'} = join( "\n", ( @Description, @test_scenario ));
#	$Gnats{'Arrival-Date'} = \@Arrival_Date;
#	$Gnats{'Reference_Number'} = $Reference_Number;
#	$Gnats{'Responsible'} = $Responsible;
##	$Gnats{"Reporter\'s email"} = $Reporters_email;

	my $newPR = Create_PR( %Gnats );

	Print_PR( $newPR );

	unless( $main::debug ){
		unless( $main::r_db->submitPR( $newPR )){
			print( "ERROR: Could not submit PR!\n" );
		}
	}
	unless( $main::r_db->disconnect() ){
		die( "Could not disconnect from database!\n" );
	}
}

#################################################################################
sub Map_CQ_To_Gnats {
	my( $r_fields, $r_field_index ) = @_;

#-------------------------------------------------------------
# The following are Kevin's orignal mapping notes
# Reporter's email -> kpopik@broadcom.com
# Headline field -> Synopsis field
# Severity field-> Priority field & Severity field
# In the Severity field, the following mappings occur:
# * Showstopper -> Critical
# * High -> Major
# * Medium -> Minor
# * Low -> Cosmetic
# Description field -> Description
# Originator field -> kpopik@broadcom.com
# Reference_Number field -> 1st eleven characters of subject line
#---------------------------------------------------------

# This is a description of my current understanding of the
# needed mapping of CQ fields to Gnats fields:
#
# Sent: (maps to Arrival Date in Gnats )
# To: (no mapping)
# Subject (use the first 11 chars as Reference Number:)
# Headline: (maps to Synopsis:)
# Description: (maps to Description:)
# Test Scenario: no mapping
# Assignment Info Log: (no mapping)
# CR Type: (no mapping)
# Severity: (maps to Severity: with the following value mappings)
# * Showstopper -> Critical
# * High -> Major
# * Medium -> Minor
# * Low -> Cosmetic
# Severity also maps to Priority: 
# * Showstopper -> High
# * High -> High
# * Medium -> Mediun
# * Low -> Low
# Assigned To: - name and email - (no mapping )
# Target Product: (no mapping)
# Target Release: (no mapping)
# Assigned by: - name and email - (no mapping )
# 
# In addition, the following Gnats fields are set to a fixed value
# Submitter-Id: - Comneon
# Reporter's email: -> kpopik@broadcom.com
# Originator: -> kpopik@broadcom.com
# Category: 2140-Software-Unknown 
# Responsible:    Louis Botha lbotha@broadcom.com

# 
	my $Arrival_Date = join( "\n", @{${$r_fields}{'Sent'}});

	my @CQ_Subject = @{${$r_fields}{'Subject'}};
	my $subj_line = join( "", @CQ_Subject );
	# Strip off the first eleven chars of subject for the value of 
	# Reference Number
	my ( $Reference_Number ) = substr( $subj_line, 0, 11 );

	# Note that Synopsis is a one line field
	my $Synopsis = join( " ", @{${$r_fields}{'Headline'}});

	my $Description = join( "\n", @{${$r_fields}{'Description'}});
	#my @test_scenario = @{${$r_fields}{'Test Scenario'}};

	# Figure gnats severity and priority from cq severity field
	my @Severity = @{${$r_fields}{'Severity'}};
	my $cq_severity_value = $Severity[0];

	my $gnats_severity_value = "";
	my $gnats_priority = "";
	SEVERITY: {
	if( $cq_severity_value =~ /Showstopper/i){
		$gnats_severity_value = 'critical';
		$gnats_priority = "high";
		last SEVERITY;
	} 
	if( $cq_severity_value =~ /High/i){
		$gnats_severity_value = 'major';
		$gnats_priority = 'high';
		last SEVERITY;
	}
	if( $cq_severity_value =~ /Medium/i){
		$gnats_severity_value = 'minor';
		$gnats_priority = 'medium';
		last SEVERITY;
	}
	if( $cq_severity_value =~ /Low/i){
		$gnats_severity_value = 'cosmetic';
		$gnats_priority = 'low';
	}
	}

	# The following Gnats fields are set to a fixed value
	my $bcom_email_sfx = "\@broadcom.com";
	my $kpopik_id = "kpopik";
	my $lbotha_id = "lbotha";
	my $kpopik_email = "$kpopik_id\@broadcom.com";
	my $lbotha_email = "$lbotha_id\@broadcom.com";

	# Apparently we need to ifnore Reporter's email
	#my $Reporters_email = $kpopik_email;
	my $Originator = "$kpopik_email (Kevin Popik)";
	my $Category = "2140-Software-Unknown";
#	my $Responsible = "$lbotha_id";
        # Determine the default responsible person
        foreach my $category_ref (@main::categories) {
            if ($category_ref->{name} eq "$Category") {
                my $Responsible = $category_ref->{contact};
            }
        }
        
	my $Submitter_Id = "Comneon";
	
	my %Gnats = ();

	# Now set up the Gnats hash table of values
	#$Gnats{"Reporter\'s email"} = $Reporters_email;
	$Gnats{'Category'} = $Category;
	$Gnats{'Synopsis'} = $Synopsis;
	$Gnats{'Severity'} = $gnats_severity_value;
	$Gnats{'Priority'} = $gnats_priority;
	$Gnats{'Responsible'} = $Responsible;
	$Gnats{'Submitter-Id'} = $Submitter_Id;
	$Gnats{'Arrival-Date'} = $Arrival_Date;
	$Gnats{'Originator'} = $Originator;
	$Gnats{'Reference_Number'} = $Reference_Number;
	$Gnats{'Description'} = $Description;
	
	return( %Gnats );
}

#################################################################################
sub Print_Message_Hash {
	my( $r_fields, $r_field_index ) = @_;

	my $field_name;
	my $lineindex;
	my @indexes = (keys %{$r_field_index});
	$ncategories = $#indexes+1;
	for( $lineindex=1; $lineindex < $ncategories; $lineindex++ ){
		$field_name = ${$r_field_index}{$lineindex};
		$r_field_lines = ${$r_fields}{$field_name};

		$field_list = join( "\n\t", @{$r_field_lines} );
		print( "field name: \"$field_name\"\n" .
			"\t$field_list\n" );
	}
}

#################################################################################
sub Parse_Message_File {

	my $field_name;
	my $rest_of_line;
	my @msglines = @main::msglines;
	my $r_field_lines = [];
	my %fields = ();
	my %field_index = ();
	my $lineindex = 0;

	foreach $line ( @msglines ){

		chomp $line;
		# print( "$line\n" );

		next if( $line =~ /^\s*$/ );
		if( $line =~ /Description:/ ){
			$x = $x;
		}
		if( $line =~ /^[-\s]+$/ ){
			# End a category if dash line found and skip the dash line
			if( $capture_more_field_info ){
				$capture_more_field_info = 0;
				$fields{$field_name} = $r_field_lines;
				$field_index{$lineindex} = $field_name;
				$lineindex++;
			}
			next;
		}
		if( $line =~ m,^\w[\w\s]*:\/\/, ){
			# save urls as 'more' info
			if( $capture_more_field_info ){
				push( @{$r_field_lines}, $line );
			}
			next;
		}
		if( $line =~ /^\w[\w\s]*:/ ){

			( my $new_cq_field_name ) = $line =~ /^(\w[\w\s]*):\s/;
			if(( $cq_fieldnames{ $new_cq_field_name } ) || 
						( $new_cq_field_name eq "Sent" ) ||
						( $new_cq_field_name eq "Subject" )){

				if( $capture_more_field_info ){
					# save category info in hash and start over
			
					$fields{$field_name} = $r_field_lines;
					$field_index{$lineindex} = $field_name;
					$lineindex++;
				}
				# Start new category - find category name
				$r_field_lines = [];
				( $field_name ) = $new_cq_field_name;
				( $rest_of_line ) = $line =~ /:\s+(\S.*)/;
				$capture_more_field_info = 1;
				push( @{$r_field_lines}, $rest_of_line ) if( $rest_of_line );
				next;
			}
			# Skip mail fields "From" and "To" but 
			# end previous field info
			if(( $new_cq_field_name eq "From" ) || 
				( $new_cq_field_name eq "To" )){

				if( $capture_more_field_info ){
					# save category info in hash and start over
			
					$fields{$field_name} = $r_field_lines;
					$field_index{$lineindex} = $field_name;
					$lineindex++;
				}
				$capture_more_field_info = 0;
				next;
			}
			# See if we need to add this ilne to the previous field info
		}
		if( $capture_more_field_info ){
			# Save a category info line
			push( @{$r_field_lines}, $line );
		}
	}
	Print_Message_Hash( \%fields, \%field_index );
	return( \%fields, \%field_index );
}

#################################################################################
#sub Gnats_Field_Names( {
#
#	#$main::gnats_fieldnames=main::Gnats_Field_Names();
#
#	my ($code, $response ) = $main::r_db->_doGnatsCmd("LIST FIELDNAMES");
#	my @fields = split('\n', $response );
#	shift( @fields );
#	pop( @fields );
#	my %gnats_fieldnames = ();
#	foreach( @fields ){
#		$gnats_fieldnames{ $_ } = 1;
#	}
#
#	return( %gnats_fieldnames );
#}

#################################################################################
sub CQ_Field_Names {

	#$main::cq_fieldnames=main::CQ_Field_Names();

	my %cq_fieldnames = ( 
		'Product' => 1,
		'Headline' => 1,
		'Description' => 1,
		'Assignment Info Log' => 1,
		'CR Type' => 1,
		'Severity' => 1,
		'Assigned To' => 1,
		'Target Product' => 1,
		'Target Release' => 1,
		'Assigned by' => 1,
		'Submitter' => 1,
		'Submit Date' => 1,
		'For direct access to this record please go to' => 1 
		);

	return( %cq_fieldnames );
}

#################################################################################
sub Initialize_Globals {
    my( $pgetopts ) = @_;

#=item    [-a / action  <gnats action after processing message>]
#=item    [-msg / message  <Mail file containing CQ report>]
#=item    [-db / database  [db-]<gnats database dir name>] 
#=item    [-dbn / databasename  <database name>] 

	# General Options
	#

	$main::debug = $pgetopts->Get('debug');
	$main::debug = 0 unless( $main::debug );

	$main::log = $pgetopts->Get('log');
	if( $main::log ){
		die "ERROR: Unimplemented option 'log' !";
	}
	$main::verbose = $pgetopts->Get('verbose');
	$main::verbose = 0 unless( $main::verbose );

	$main::action = $pgetopts->Get('action');
	$main::action = "submit";

	$main::gnatsuser = $pgetopts->Get('gnatsuser');

	# DB specific options
	#
	my $defaultDB_Name;
	if( $main::debug || ( $main::gnatsuser eq "gmarcb" )){
		$defaultDB_Name ="IT-Test";
		$defaultDB = "db-test-it";
	} else {
		$defaultDB_Name = "MCBU_ASICs";
		$defaultDB = "db-zyray";
	}
	$main::db = $pgetopts->Get('dbdir');
	if( $main::db ){
	    unless( $main::db =~ /^db-/ ){
			$main::db = "db-$main::db";
	    }
	} else {
	    $main::db="$defaultDB";
	}

	$main::DATABASE = $pgetopts->Get('dbname');
	$main::DATABASE="$defaultDB_Name" unless( $main::DATABASE );

	my $defaultpdir = "/tools/gnats/4.0/share/gnats";
	$main::gnatspdir = $pgetopts->Get('gnatspdir');
	unless( $main::gnatspdir){
	    $main::gnatspdir = "$defaultpdir";
	}
	#$main::GNATSROOT="$main::gnatspdir/$main::db";

	$main::gnatshost = $pgetopts->Get('gnatshost');
	if( $main::gnatshost ){
		if( $main::gnatshost !~ /\.broadcom.com/ ){
			$main::gnatshost = "$main::gnatshost.broadcom.com";
		}
	} else {
		$main::gnatshost = "gnats-irva-3.broadcom.com";
	}
	$main::gnatsport = 1530;

	$main::r_db = Net::Gnats->new("$main::gnatshost",$main::gnatsport);

	my $defaultuser;
	my $defaultgpasswd;
	if( $main::debug || ( $main::gnatsuser eq "gmarcb" )){
		$defaultguser = "gmarcb";
		$defaultgpasswd = "gmarcb";
	} else {
		$defaultguser = "gnats4";
		$defaultgpasswd = "emsggn09";
	}
		
	unless( $main::gnatsuser ){ 
		$main::gnatsuser = "$defaultguser";
	}
	$main::gnatspasswd = $pgetopts->Get('gnatspasswd');
	if( $main::gnatsuser eq "$defaultguser" ){
		$main::gnatspasswd = "$defaultgpasswd";
	}
	unless( $main::gnatspasswd ){
		die( "Must enter a gnats password!" );
	}

	if ( $main::r_db->connect() ) {
		unless( $main::r_db->login("$main::DATABASE","$main::gnatsuser","$main::gnatspasswd") ){
			die( "Could not login to \"$main::DATABASE\" as \"$main::gnatsuser\"." );
		}
	} else {
		print "can not connect to $main::DATABASE\n";
		exit;
	}
	#$main::gnats_fieldnames=main::Gnats_Field_Names();
        @main::categories = $main::r_db->listCategories();
	%main::cq_fieldnames=main::CQ_Field_Names();

	$main::message = $pgetopts->Get('message');
	if( $main::message && ! @main::msglines){
		open FH, "$main::message" or die( "Could not open \"$main::message\"." );
		@main::msglines = <FH>;
		close FH;
	} else {
		# Read from stdin
		# ...
		@main::msglines = <STDIN>;

	}
		
	# Global Data Structures
	#
}

#################################################################################
# main

use POSIX;
#use strict;
#use warnings;
#use diagnostics;
use File::Basename;
use Net::Gnats;
use Net::Gnats::PR;

# Get and massage the options

$|=1;
my $pcmlog;

my $popts;

( my $pgetopts, my $setupok ) = CqGnatsOptions->new();

#################################################################################
# Set default parameter values

main::Initialize_Globals( $pgetopts );

#################################################################################

# Parse the message file
my( $r_fields, $r_field_index ) = main::Parse_Message_File();

#################################################################################
# Map the cq fields to the gnats fields

my %Gnats = main::Map_CQ_To_Gnats( $r_fields, $r_field_index );

#################################################################################
# Map the cq fields to the gnats fields

main::Submit_PR( %Gnats );


1;
