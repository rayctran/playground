---
# db-mysql-replication/tasks/main.yml

# No go for CentOS
- debug:
    msg: "This Ansible role does not work on CentOS. Please follow the Confluence documentation and manually configure replication"
  when: ansible_distribution == 'CentOS'
  tags:
    - mysql-replication

# No go for Non-PROD or replication role is not set
- debug:
    msg: "Replication is not required..."
  when: mysql_repl_role is undefined
  tags:
    - mysql-replication

- meta: end_play
  when: ansible_distribution == 'CentOS' or  mysql_repl_role is undefined
  tags:
    - mysql-replication

- set_fact:
    last_digit_hostname_work: |
      {{ hostvars[inventory_hostname].ansible_hostname.split('-')[3] | map('regex_replace','^0','') | list}}
  tags:
    - mysql-replication

- set_fact:
    server_id: "{{ last_digit_hostname_work[1] }}"
  tags:
    - mysql-replication

# Pull in the credentials
#- name: "Get the variables from an existing file -- tags: mysql-replication"
#  include_vars: "/usr/local/ansible/mysql/{{ client_code }}_mysql_creds.yml"
#  tags:
#    - mysql-replication

#- name: Set the root password for Dev and Stage
#  set_fact:
#    mysql_root_password: "{{ devstg_root_password }}"
#  when: env_type | match("DEV|STG")
#  tags:
#    - mysql-install

- name: "Set the root password for Production -- tags: mysql-replication"
  set_fact:
    mysql_root_password: "{{ prd_root_password }}"
  tags:
    - mysql-replication

#- name: Set the replication user's password for Dev and Stage
#  set_fact:
#    mysql_replication_user_password: "{{ devstg_replpuser_password }}"
#  when: env_type | match("DEV|STG")
#  tags:
#    - mysql-install

- name: "Set the replication user's password for Production -- tags: mysql-replication"
  set_fact:
    mysql_replication_user_password: "{{ prd_repluser_password }}"
  tags:
    - mysql-replication

- name: Check to see if replication is set up first
  mysql_replication:
    mode: getslave
#    login_user: root
#    login_password: "{{ mysql_root_password }}"
  ignore_errors: true
  register: slave_status
  tags:
    - mysql-replication

- debug:
    msg: "Replication is not set up -- tags: mysql-replication"
  when: not slave_status.Is_Slave
  tags:
    - mysql-replication

- debug:
    msg: "Replication is set up. Done -- tags: mysql-replication"
  when: slave_status.Is_Slave is defined and slave_status.Is_Slave
  tags:
    - mysql-replication

- meta: end_play
  when: slave_status.Is_Slave is defined and slave_status.Is_Slave
  tags:
    - mysql-replication

- name: "Creating database replication user on the primary or bi -- tags: mysql-replication"
  mysql_user:
    name: repl
    host: "{{  mysql_repl_secondary }}"
    password: "{{ mysql_replication_user_password }}"
    priv: '*.*:REPLICATION SLAVE'
    state: present
#    login_user: root
#    login_password: "{{ mysql_root_password }}"
#  when: mysql_repl_role | match("primary")
  when: mysql_repl_role | match("primary")
  tags:
    - mysql-replication

- name: "Creating database replication user on the secondary -- tags: mysql-replication"
  mysql_user:
    name: repl
    host: "{{  mysql_repl_primary }}"
    password: "{{ mysql_replication_user_password }}"
    priv: '*.*:REPLICATION SLAVE'
    state: present
#    login_user: root
#    login_password: "{{ mysql_root_password }}"
#  when: mysql_repl_role | match("primary")
  when: mysql_repl_role | match("secondary")
  tags:
    - mysql-replication


- name: "Creating database replication user for bi on the secondary -- tags: mysql-replication"
  mysql_user:
    name: repl
    host: "{{  mysql_repl_ro_slave }}"
    password: "{{ mysql_replication_user_password }}"
    priv: '*.*:REPLICATION SLAVE'
    state: present
#    login_user: root
#    login_password: "{{ mysql_root_password }}"
#  when: mysql_repl_role | match("primary")
  when: mysql_repl_role | match("secondary") and mysql_repl_ro_slave is defined
  tags:
    - mysql-replication

#- name: "Creating database replication user on secondary server"
#  mysql_user:
#    name: repl
#    host: "{{ mysql_repl_primary }}"
#    password: "{{ mysql_replication_user_password }}"
#    priv: '*.*:REPLICATION SLAVE'
#    state: present
##    login_user: root
##    login_password: "{{ mysql_root_password }}"
#  when: mysql_repl_role | match("secondary")
#  tags:
#    - mysql-replication
#
#- name: "Creating database replication user on secondary server"
#  mysql_user:
#    name: repl
#    host: "{{ mysql_repl_primary }}"
#    password: "{{ mysql_replication_user_password }}"
#    priv: '*.*:REPLICATION SLAVE'
#    state: present
##    login_user: root
##    login_password: "{{ mysql_root_password }}"
#  when: mysql_repl_role | match("bi")
#  tags:
#    - mysql-replication

# Get master binlog file name and binlog position of the primary 
- name: "Get binlog info of the primary {{ mysql_repl_primary }} -- tags: mysql-replication"
  mysql_replication:
    mode: getmaster
#    login_user: root
#    login_password: "{{ mysql_root_password }}"
  register: mysql_master_primary
  delegate_to: "{{ mysql_repl_primary }}"
  when: mysql_repl_role | match("secondary")
  tags:
    - mysql-replication

# Get master binlog file name and binlog position of the secondary 
- name: "Get binlog info of the secondary {{ mysql_repl_secondary }} -- tags: mysql-replication"
  mysql_replication:
    mode: getmaster
#    login_user: root
#    login_password: "{{ mysql_root_password }}"
  register: mysql_master_secondary
  delegate_to: "{{ mysql_repl_secondary }}"
  when: mysql_repl_role | match("primary|bi")
  tags:
    - mysql-replication

# Stop Slave
- mysql_replication:
    mode: stopslave
#    login_user: root
#    login_password: "{{ mysql_root_password }}"
  tags:
    - mysql-replication

#- name: "Put repl.conf into place"
#  template:
#    src: repl.conf.j2
#    dest: /etc/mysql/conf.d/repl.conf
#    owner: root
#    group: root
#    mode: 0644
#  tags:
#    - mysql-replication

- name: "Updating the LyonsCG Configuration file For BI Server's Master -- mysql-replication"
  lineinfile:
    dest: /etc/mysql/conf.d/lyonscg.cnf 
    line: "log_slave_updates" 
    state: present
  when: mysql_repl_role | match("secondary") and mysql_repl_ro_slave is defined
  tags:
    - mysql-replication

- name: Updating the LyonsCG Configuration file For BI Server's Client
  lineinfile:
    dest: /etc/mysql/conf.d/lyonscg.cnf 
    line: "read_only"
    state: present
  when: mysql_repl_role | match("bi")
  tags:
    - mysql-replication

# Change master to master
#- name: Setup Master Master part one
- name: "Change Master to the secondary server -- mysql-replication"
  mysql_replication:
    mode: changemaster
    master_user: "repl"
    master_password: "{{ mysql_replication_user_password }}"
    master_host: "{{ mysql_repl_secondary }}"
    master_log_file: "{{ mysql_master_secondary.File }}"
    master_log_pos: "{{ mysql_master_secondary.Position }}"
#    login_user: root
#    login_password: "{{ mysql_root_password }}"
  when: mysql_repl_role | match("primary|bi")
  tags:
    - mysql-replication

# Change master to master
#- name: Setup Master Master part two
- name: "Change Master to the master server  -- tags: mysql-replication"
  mysql_replication:
    mode: changemaster
    master_user: "repl"
    master_password: "{{ mysql_replication_user_password }}"
    master_host: "{{ mysql_repl_primary}}"
    master_log_file: "{{ mysql_master_primary.File }}"
    master_log_pos: "{{ mysql_master_primary.Position }}"
#    login_user: root
#    login_password: "{{ mysql_root_password }}"
  when: mysql_repl_role | match("secondary")
  tags:
    - mysql-replication

# Start Slave
- name: "Restart Slaves -- tags: mysql-replication"
  mysql_replication:
    mode: startslave
#    login_user: root
#    login_password: "{{ mysql_root_password }}"
  notify:
    - restart mysql
  tags:
    - mysql-replication
